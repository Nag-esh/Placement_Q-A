 Have the function PalindromeCreator(str) take the str parameter being passed and determine
   if it is possible to create a palindromic string of minimum length 3 characters by 
 * removing 1 or 2 characters. For example: if str is "abjchba" then you can remove the characters jc to 
 * produce "abhba" which is a palindrome. For this example your program should return the two characters 
 * that were removed with no delimiter and in the order they appear in the string, so jc.
 * If 1 or 2 characters cannot be removed to produce a palindrome, then return the string not possible.
 * If the input string is already a palindrome, your program should return the string palindrome.
 * 
 * The input will only contain lowercase alphabetic characters. Your program should always attempt 
 * to create the longest palindromic substring by removing 1 or 2 characters (see second sample test case as an example).
 * The 2 characters you remove do not have to be adjacent in the string.
 * Examples
 * Input: "mmop"
 * Output: not possible
 * Input: "kjjjhjjj"
 * Output: k 



code:






def PalindromeCreator(s):
    # Check if the string is already a palindrome
    if s == s[::-1]:
        return "palindrome"
    
    # Try removing each character and check if the result is a palindrome
    for i in range(len(s)):
        t = s[:i] + s[i+1:]
        if t == t[::-1] and len(t) >= 3:
            return s[i]  # Return the removed character

    # Try removing two characters
    for i in range(len(s)):
        for j in range(i+1, len(s)):
            t = s[:i] + s[i+1:j] + s[j+1:]
            if t == t[::-1] and len(t) >= 3:
                return s[i] + s[j]  # Return the removed characters

    # If no palindrome can be formed by removing one or two characters
    return "not possible"
